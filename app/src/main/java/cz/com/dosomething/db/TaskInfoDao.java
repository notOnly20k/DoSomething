package cz.com.dosomething.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cz.com.dosomething.bean.TaskInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_INFO".
*/
public class TaskInfoDao extends AbstractDao<TaskInfo, Void> {

    public static final String TABLENAME = "TASK_INFO";

    /**
     * Properties of entity TaskInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Time = new Property(1, java.util.Date.class, "time", false, "TIME");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Ischecked = new Property(3, boolean.class, "ischecked", false, "ISCHECKED");
    }


    public TaskInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TaskInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_INFO\" (" + //
                "\"TITLE\" TEXT," + // 0: title
                "\"TIME\" INTEGER," + // 1: time
                "\"CONTENT\" TEXT," + // 2: content
                "\"ISCHECKED\" INTEGER NOT NULL );"); // 3: ischecked
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskInfo entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time.getTime());
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getIschecked() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskInfo entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time.getTime());
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getIschecked() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TaskInfo readEntity(Cursor cursor, int offset) {
        TaskInfo entity = new TaskInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.getShort(offset + 3) != 0 // ischecked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskInfo entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIschecked(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TaskInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TaskInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(TaskInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
